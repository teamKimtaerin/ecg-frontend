'use client'

import React, { useState, useCallback, useRef } from 'react'
import { cn, SIZE_CLASSES, TRANSITIONS } from '@/lib/utils'
import Modal, { type ModalProps } from './Modal'
import Button from './Button'
import ButtonGroup from './ButtonGroup'
import Dropdown from './Dropdown'
import Switch from './Switch'

export interface UploadModalProps
  extends Omit<ModalProps, 'children' | 'title' | 'size'> {
  onFileSelect: (files: FileList) => void
  onStartTranscription: (data: {
    files?: FileList
    url?: string
    language: string
    useDictionary: boolean
    autoSubmit: boolean
    method: 'file' | 'link'
  }) => void
  acceptedTypes?: string[]
  maxFileSize?: number
  multiple?: boolean
  isLoading?: boolean
}

const UploadModal: React.FC<UploadModalProps> = ({
  isOpen,
  onClose,
  onFileSelect,
  onStartTranscription,
  acceptedTypes = ['audio/*', 'video/*'],
  maxFileSize = 100 * 1024 * 1024, // 100MB
  multiple = true,
  isLoading = false,
  ...modalProps
}) => {
  const [isDragOver, setIsDragOver] = useState(false)
  const [selectedLanguage, setSelectedLanguage] = useState(
    'Korean (South Korea)'
  )
  const [useTranscriptionDictionary, setUseTranscriptionDictionary] =
    useState(false)
  const [submitAutomatically, setSubmitAutomatically] = useState(true)
  const [inputMethod, setInputMethod] = useState<'file' | 'link'>('file')
  const [videoUrl, setVideoUrl] = useState('')
  const [uploadedFiles, setUploadedFiles] = useState<FileList | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleDragEnter = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setIsDragOver(true)
  }, [])

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setIsDragOver(false)
  }, [])

  const handleDragOver = useCallback((e: React.DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
  }, [])

  const handleDrop = useCallback(
    (e: React.DragEvent) => {
      e.preventDefault()
      e.stopPropagation()
      setIsDragOver(false)

      const files = e.dataTransfer.files
      if (files.length > 0) {
        // Validate dropped files
        const validFiles = Array.from(files).filter((file) => {
          const isValidType = acceptedTypes.some((type) => {
            if (type.endsWith('/*')) {
              const baseType = type.replace('/*', '')
              return file.type.startsWith(baseType)
            }
            return file.type === type
          })
          const isValidSize = file.size <= maxFileSize

          if (!isValidType) {
            console.warn(`File ${file.name} has invalid type: ${file.type}`)
          }
          if (!isValidSize) {
            console.warn(
              `File ${file.name} exceeds size limit: ${(file.size / 1024 / 1024).toFixed(2)}MB`
            )
          }

          return isValidType && isValidSize
        })

        if (validFiles.length > 0) {
          // Create new FileList-like object
          const dt = new DataTransfer()
          validFiles.forEach((file) => dt.items.add(file))
          setUploadedFiles(dt.files)
          onFileSelect(dt.files)
        }
      }
    },
    [onFileSelect, acceptedTypes, maxFileSize]
  )

  const handleFileChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      const files = e.target.files
      if (files && files.length > 0) {
        setUploadedFiles(files)
        onFileSelect(files)
      }
    },
    [onFileSelect]
  )

  const handleBrowseClick = useCallback(() => {
    fileInputRef.current?.click()
  }, [])

  const handleSubmit = useCallback(() => {
    const transcriptionData = {
      language: selectedLanguage,
      useDictionary: useTranscriptionDictionary,
      autoSubmit: submitAutomatically,
      method: inputMethod,
      ...(inputMethod === 'file' && uploadedFiles && { files: uploadedFiles }),
      ...(inputMethod === 'link' && { url: videoUrl }),
    }

    // Validate inputs
    if (inputMethod === 'file' && !uploadedFiles) {
      alert('Please select files first')
      return
    }
    if (inputMethod === 'link' && !videoUrl.trim()) {
      alert('Please enter a video URL')
      return
    }

    onStartTranscription(transcriptionData)
  }, [
    selectedLanguage,
    useTranscriptionDictionary,
    submitAutomatically,
    inputMethod,
    videoUrl,
    uploadedFiles,
    onStartTranscription,
  ])

  return (
    <>
      <input
        ref={fileInputRef}
        type="file"
        multiple={multiple}
        accept={acceptedTypes.join(',')}
        onChange={handleFileChange}
        className="hidden"
      />

      <Modal
        {...modalProps}
        isOpen={isOpen}
        onClose={onClose}
        size="lg"
        title="Fast Transcription"
        className="max-w-4xl"
      >
        <div className={cn('flex flex-col', SIZE_CLASSES.gap['extra-large'])}>
          {/* Input Method Selection */}
          <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
            <h3 className="text-h3 font-semibold text-text-primary">
              1. Choose input method
            </h3>

            <ButtonGroup
              orientation="horizontal"
              spacing="none"
              className="bg-surface-secondary rounded-small p-1"
            >
              <Button
                variant={inputMethod === 'file' ? 'primary' : 'secondary'}
                style={inputMethod === 'file' ? 'fill' : 'outline'}
                size="medium"
                onClick={() => setInputMethod('file')}
                className="flex-1 border-0 hover:shadow-none focus:shadow-none"
              >
                Upload Files
              </Button>
              <Button
                variant={inputMethod === 'link' ? 'primary' : 'secondary'}
                style={inputMethod === 'link' ? 'fill' : 'outline'}
                size="medium"
                onClick={() => setInputMethod('link')}
                className="flex-1 border-0 hover:shadow-none focus:shadow-none"
              >
                Import Link
              </Button>
            </ButtonGroup>
          </div>

          {/* File Upload Section */}
          {inputMethod === 'file' && (
            <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
              <h4 className="text-body font-semibold text-text-primary">
                Upload your files
              </h4>

              {!uploadedFiles ? (
                <div
                  className={cn(
                    'border-2 border-dashed rounded-small text-center cursor-pointer min-h-[200px] flex flex-col items-center justify-center',
                    SIZE_CLASSES.padding['extra-large'],
                    TRANSITIONS.colors,
                    isDragOver
                      ? 'border-primary bg-primary-opaque'
                      : 'border-border bg-surface-secondary hover:border-primary hover:bg-primary-opaque'
                  )}
                  onDragEnter={handleDragEnter}
                  onDragLeave={handleDragLeave}
                  onDragOver={handleDragOver}
                  onDrop={handleDrop}
                  onClick={handleBrowseClick}
                >
                  <div
                    className={cn(
                      'flex flex-col items-center',
                      SIZE_CLASSES.gap.medium
                    )}
                  >
                    <div className="w-16 h-16 mx-auto bg-primary rounded-full flex items-center justify-center">
                      <svg
                        className={cn(
                          SIZE_CLASSES.iconClasses.large,
                          'text-white'
                        )}
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"
                        />
                      </svg>
                    </div>

                    <div>
                      <p className="text-body text-text-primary font-medium">
                        Drop files here or click to browse
                      </p>
                      <p className="text-caption text-text-secondary mt-1">
                        Supports audio and video files (max{' '}
                        {Math.round(maxFileSize / 1024 / 1024)}MB)
                      </p>
                    </div>
                  </div>
                </div>
              ) : (
                <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
                  <div
                    className={cn(
                      'bg-primary-very-light border border-primary rounded-small',
                      SIZE_CLASSES.padding.medium
                    )}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <h5 className="text-body font-semibold text-text-primary">
                        Uploaded files ({uploadedFiles.length})
                      </h5>
                      <Button
                        variant="secondary"
                        style="outline"
                        size="small"
                        onClick={() => {
                          setUploadedFiles(null)
                          if (fileInputRef.current) {
                            fileInputRef.current.value = ''
                          }
                        }}
                        className="text-xs"
                      >
                        Change Files
                      </Button>
                    </div>

                    <div
                      className={cn('flex flex-col', SIZE_CLASSES.gap.small)}
                    >
                      {Array.from(uploadedFiles).map((file, index) => (
                        <div
                          key={`${file.name}-${index}`}
                          className={cn(
                            'flex items-center justify-between bg-surface rounded-default',
                            SIZE_CLASSES.padding.small
                          )}
                        >
                          <div className="flex items-center gap-3">
                            <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center flex-shrink-0">
                              <svg
                                className="w-4 h-4 text-white"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                {file.type.startsWith('video/') ? (
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"
                                  />
                                ) : (
                                  <path
                                    strokeLinecap="round"
                                    strokeLinejoin="round"
                                    strokeWidth={2}
                                    d="M9 19V6l6 6-6 6z"
                                  />
                                )}
                              </svg>
                            </div>
                            <div className="flex-1 min-w-0">
                              <p className="text-body font-medium text-text-primary truncate">
                                {file.name}
                              </p>
                              <p className="text-caption text-text-secondary">
                                {(file.size / 1024 / 1024).toFixed(2)} MB •{' '}
                                {file.type}
                              </p>
                            </div>
                          </div>

                          <div className="flex items-center gap-2">
                            <span className="inline-flex items-center px-2 py-1 bg-status-positive text-white rounded-full text-xs font-medium">
                              Ready
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}
            </div>
          )}

          {/* Link Import Section */}
          {inputMethod === 'link' && (
            <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
              <h4 className="text-body font-semibold text-text-primary">
                Import from link
              </h4>
              <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
                <div>
                  <label className="block text-body font-medium text-text-primary mb-2">
                    Video URL
                  </label>
                  <input
                    type="url"
                    value={videoUrl}
                    onChange={(e) => setVideoUrl(e.target.value)}
                    placeholder="https://example.com/video.mp4 or YouTube/Vimeo URL"
                    className={cn(
                      'w-full bg-surface border border-border rounded-default text-text-primary placeholder-text-secondary',
                      SIZE_CLASSES.padding.medium,
                      'focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary',
                      TRANSITIONS.colors
                    )}
                  />
                </div>

                <div
                  className={cn(
                    'bg-surface-secondary rounded-small',
                    SIZE_CLASSES.padding.medium
                  )}
                >
                  <div
                    className={cn('flex items-start', SIZE_CLASSES.gap.medium)}
                  >
                    <div
                      className={cn(
                        'bg-primary rounded-full flex items-center justify-center flex-shrink-0 mt-0.5',
                        SIZE_CLASSES.iconClasses.medium
                      )}
                    >
                      <svg
                        className={cn(
                          SIZE_CLASSES.iconClasses.small,
                          'text-white'
                        )}
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </div>
                    <div>
                      <p className="text-caption font-semibold text-text-primary mb-1">
                        Supported platforms:
                      </p>
                      <p className="text-caption text-text-secondary">
                        YouTube, Vimeo, Direct video links (MP4, MOV, AVI, etc.)
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Language Selection Section */}
          <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
            <h3 className="text-h3 font-semibold text-text-primary">
              2. Configure transcription settings
            </h3>

            <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
              <Dropdown
                label="Audio Language"
                value={selectedLanguage}
                onChange={(value) => setSelectedLanguage(value)}
                options={[
                  {
                    value: 'Korean (South Korea)',
                    label: 'Korean (South Korea)',
                  },
                  { value: 'English (US)', label: 'English (US)' },
                  { value: 'Japanese', label: 'Japanese' },
                  {
                    value: 'Chinese (Simplified)',
                    label: 'Chinese (Simplified)',
                  },
                ]}
                size="medium"
                placeholder="Select language"
              />

              {/* Additional options */}
              <div className={cn('flex flex-col', SIZE_CLASSES.gap.medium)}>
                <Switch
                  label="Use transcription dictionary"
                  isSelected={useTranscriptionDictionary}
                  onChange={setUseTranscriptionDictionary}
                  size="medium"
                  id="transcription-dictionary-switch"
                />

                <Switch
                  label="Submit automatically after transcription"
                  isSelected={submitAutomatically}
                  onChange={setSubmitAutomatically}
                  size="medium"
                  id="auto-submit-switch"
                />
              </div>
            </div>
          </div>
        </div>

        {/* Modal Actions */}
        <div
          className={cn(
            'flex justify-end border-t border-border',
            'mt-6 pt-6' // Using consistent spacing pattern
          )}
        >
          <ButtonGroup orientation="horizontal" spacing="small">
            <Button
              variant="secondary"
              style="outline"
              size="medium"
              onClick={onClose}
              isDisabled={isLoading}
            >
              Cancel
            </Button>
            <Button
              variant="primary"
              style="fill"
              size="medium"
              onClick={handleSubmit}
              isDisabled={isLoading}
              isPending={isLoading}
            >
              {isLoading ? 'Starting...' : 'Start Transcription'}
            </Button>
          </ButtonGroup>
        </div>
      </Modal>
    </>
  )
}

export default UploadModal
